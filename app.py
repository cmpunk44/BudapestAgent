# app.py

import streamlit as st
from langchain_core.messages import HumanMessage
from agent import budapest_agent

# Streamlit oldalbe√°ll√≠t√°sok
st.set_page_config(page_title="Budapest Agent", layout="centered")

st.title("üöå Budapest T√∂megk√∂zleked√©si Asszisztens")
st.markdown("√çrd be, hova szeretn√©l menni, √©s aj√°nlok √∫tvonalat + l√°tnival√≥kat!")

# Felhaszn√°l√≥i bemenet
user_input = st.text_input("K√©rd√©sed:", placeholder="Pl. Hogyan jutok el az Ipar utc√°r√≥l a H≈ës√∂k ter√©re?")

if st.button("K√ºld√©s") and user_input:
    with st.spinner("Dolgozom a v√°laszon..."):
        try:
            initial_message = HumanMessage(content=user_input)
            result = budapest_agent.graph.invoke({"messages": [initial_message]})
            output = result["messages"][-1].content

            st.markdown("### V√°lasz")
            st.write(output)

            # Thought-Action-Observation Debug panel
            st.markdown("---")
            st.markdown("### üõ† L√©p√©senk√©nti gondolatmenet")
            for msg in result["messages"]:
                if msg.type == "ai" and msg.content.strip():
                    st.markdown(f"**Thought:** {msg.content}")
                elif msg.type == "tool" and hasattr(msg, 'name'):
                    lines = msg.content.split("\n", 1)
                    if len(lines) == 2:
                        call_line, observation = lines
                        st.markdown(f"**Action:** `{msg.name}`")
                        st.code(call_line, language="json")
                        st.markdown("**Observation:**")
                        st.code(observation, language="json")
                    else:
                        st.markdown(f"**Action:** `{msg.name}`")
                        st.code(msg.content, language="json")

        except Exception as e:
            st.error(f"Hiba t√∂rt√©nt: {str(e)}")
